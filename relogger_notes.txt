
8/14:
Several different numbering schemes.

Local numbers are per-file and per version.  Of the form (hash-of-file, id)

Global numbers are what's displayed. They are sequential. 

When software is produced, can construct an explicit map. Can update the map when
new code is seen.


When a new version is released, construct a map from NewLocal to Global.
Can just keep both maps; hash+id should make it unique.

Properties:

- if a code file is unchanged, numbers will always stay constant
- gracefully handles code not seen statically; assigns it a number the first
time and if the number is cached, will be stable forever.



Can do same trick for C via library interposition
same trick for python via loader? Cite SEJITS

---
Paper:

Keep theme of "previous API, new API good"
Show how to practically carve out new API for legacy systems
Show how to handle version upgrades leveraging static analysis

Should demonstrate dynamic reconfiguration
Can flip between off, on, and summarize


--
Impl:
Need a thread to listen for config instructions
isEnabled table in log wrapper
save-restore for local to global mapping
--

8/22:

Listen thread is set. Table saving is set. Is enabled table is present.
Next steps:
	Slurping local-to-global mapping.
	Test script to show we can keep control of Hadoop classloading during MR job
	Performance microbenchmark
	Summarizing messages?

9/12:
Notes from Google talk
	Should lookup Frost logger	by	 carl de marken
	C is hard -- if statically linked, no library interposition.
	tag system and api aren't thought through yet	
	
9/13:
	Built microbenchmark.
Warmup made a big difference. JIT effect?
Raw Log4j no-log path is about 4ns
No-log path in my code is 40ns
Exit immediately with full code is 13 ns
Exit immediately with most of the if branches commented out drops to 3ns 

With short code but leaving in the dispatch table lookup is 29 ns
Full length without dispatch table is 15 ns

Conclusions:
	Dispatch table is 20-25 ns.
	Code length imposes about 10 nm
	Cascading 'if' itself is negligible


Factoring out log calls to functions and using case statement:
	Still 10ns of overhead over raw. Due to isEnabled() call?
	isEnabled, alone, costs 4ns

Tempting to just say "turn off log statement early, using the bitSet, so perf on log-not-taken doesn't mean anything."  But doesn't this mean we would need to hijack app calls to reset log priority?  

If willing to tolerate some unsoundness, can fix this by saying "recompute isEnabled table after every app-level call to update priorities."

BitSet copy is superfast -- half a microsecond. So with thousands of log statements, doing something for every log stmt once is O(millisecond)


DESIGN Q:
	Do we ignore user logger config or maintain it?  Maintaining means that we need to separate "turned off explicitly" from "implicitly"

Possibility:
	keep an explicit_disable. Locked around. Set by set() call and read by bulk_reupdate()
	cached_disable is set by set() and bulk_reupdate(), in a copy-on-write manner.
	read by logmsg.


Tried it. Pretty sure the cache-disable is working. But why is it still slow?  Reversing the initial way the bit is set causes a 10 ns shift.



USEFUL LINKS:
http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html java options
http://wikis.sun.com/display/HotSpotInternals/PrintAssembly
http://wikis.sun.com/display/HotSpotInternals/MicroBenchmarks
http://wikis.sun.com/display/HotSpotInternals/PerformanceTechniques


---

9/18:
	Using dense integers for statement numbers allows better data structures:
	Using HashSet, is 7ns for toy perf test. Factor of 3.5?

-----

9/20:
	Timing is fixed!  Problem was the pass-by-array arg passing. Now at 2-ish ns, which is fast enough.
	Using a regular set instead of BitSet raises time to 7ish ns -- too much.

A potential unsoundness:  What if multiple logger values are passed to a given point? This is a strange style but not an impossible one, particularly in a wrapper context. 

Can audit for statically without too much pain. We can't check a load-time if there's an open universe and the logger is non-private.

Can punt by saying that we don't promise to maintain priorities set by legacy logger. Only best effort.

Difficulty testing with commons_log -- how to get output to stdout not stderr?  Probably via attribute setting?


Next thing to build:
	output first message, always?  Easy to do, by changing the way that cached_disable is implemented.


KEY RESEARCH Qs and CONTRIBUTIONS:
	Show that many problems with logging today are due to grouping messages by value, without an explicit identification of source.
	Show that we can retrofit a logging API, solving several practical problems, in ways that today's Aspect systems can't. (Log spew, message grouping)
	Show that we can handle version migrations gracefully using static analysis to extract templates, and then fuzzy-matching the templates.

Key ideas:
	Separate canonical from sequential names. Sequential names are more efficient at runtime since they allow dense data structures. 
	
------

9/23:
	POSSIBLE BUG:  Javassist sometimes sees BCs out of order.
       Classhash plus BC in method isn't workable. Hash in method desc as well?

9/24:
	
Deadlock caused by:
	Reconciler gets a lock on the IDMapper, then tries to write.
		This triggers a class load.
	Meanwhile, the class loader has a lock on something and tries to do a map lookup. Fix is to load all classes in advance.


Algorithm for printing should be:
If first time, print. Mark as not-first-time
Else if check if enabled, print.

Need one Copy-on-write bitset, cached-disable, which is initially all zeros.
Separately have both a user-disabled, underlying-disabled and printed-once.
	cached-disable is  printed-once & (user | underlying-disabled)

Print-once can be done by just twiddling the printed-once bit.

---

Hard part is exactly how to incorporate legacy API. Seems like we have three cases:   user-enabled, user-disabled, and underlying-disabled.
Howabout this:
	On a rebuild,
	cache_disable = user_disable 
		Separately, maintain  printed-once and user-enabled.
	We then incrementally start cache-disabling when we hit a legacy disable.

If not cache-disabled:
	if ~printed_once or user_enabled, 
		print
		set printed_once
	else
		fall back on native, set cache-disable if not user_enabled


Overhead on log-taken branch is a few hundred nanos. Without relogger, should be around 580 ns.  With relogger, currently about 760-780, for a 200 ns overhead. 
	If there are a hundred messages per second, that's about 20 microseconds per second.  That's a few parts in a million.  

Can display tags via Log4j by subclassing Level


9/27:
	shouldIPrint needs a four-way return:
		One bit for "print to log or not"
		One bit for "maybe record to file"
		Any combination is possible, since user might want messages recorded to mapping-file, only, not to logger output.

Users might want to disable a statement by file and lineno, without knowing the ID. Supporting this requires a few changes:
	UDPListener can take either a short ID or else a longer ID.  (Lookup longer IDs in the Mapping table.)
	Add classname:lineno to the ID table. Won't conflict with hashes since hashes have underscore and no colon. 
	This also allows enabling/disabling messages by canonical ID.

Added support for recording messages. Added support for reset-all.
Added "soft" keys, based on class-name.

Finishing the feature requires handling the case where we have a soft mapping and not a hard mapping.  This is all in the IDMapper, in localToGlobal().
	What happens if we have a cached hard mapping and the user adds a soft mapping for a not-yet-loaded class?  We'll add a new number for the soft ID. We'll clean this up at class-load time, by overwriting the mapping.  Should copy over the enable-bits for it. Only user-enable can be active, since it'll necessarily never have been printed.

Over time, we can leak IDs, e.g. by caching mappings for code that isn't there. 


---------

10/2/11: Can cache line number along with canonical ID -- every canonical ID maps uniquely to a soft ID.  But this isn't so useful since we may have multiple equally good but inconsistent soft -->canonical mappings.

Perhaps solve this on the command input side? Cache inapplicable soft mappings, try periodically to reapply?

It may be time to build/test the name-remapping process.  Plan of action:
   Define canonical file format for map-out. Have jchord code output this. Python script to reconcile two such files. Test on toy example with just a rename -- everything should line up.  Then test with Hadoop, 20 vs CDH3u0. See what fraction match properly. 

---
Java.util logger has different log method names. Easy to adapt?



10/5:
	Minor problem: matching works badly for BaseTest and SecondBaseTest because we don't include the logger name in the comparison. Probably an artifact of test since real programs only use one logger.

Bigger problem:
	Multiple canonical names for same logger call in static analysis of Hadoop 18. Example: 
org.apache.hadoop.ipc.Server$Responder:636      warn    .*,  call .*: output error

----


--
10/6:
	Need to be clear on whether there's a statement zero. Leaning against since it means we can have a "no statement" field. Useful for, e.g., having a growable int[] list of messages with a tag
	Should have default tags; by file and by priority. 
	How do we avoid re-tagging already tagged entries?  Would rather have list than set data structure. 


What happens if we have both an existing canonical-to-num mapping and also a relocation table? Should use existing map first, then relocate.

Tags should be in the mapping file -- read in the same place, and useful to store there. 


10/7:
	BUG:  We changed to writing mapping file from "info", not from the forward-map.  This means we need infos for every statement, not just the ones that were used. This requires recording class names in mapping file. This is redundant but harmless.


Think I fixed the race condition -- problem was reading-on-startup without lock and/or unlocking before closing file.

New problem:
	what if an enabled log statmeent is protected by isDebugEnabled?  Possible fix:  patch stmt to "is next log statement enabled"?

Should do tagging. Esp. including by previous methname.  Need to write out.


-----
Relocation tables seem to work?


10/14:
	https://github.com/twitter/configgy 
	Classload measurements done. Adds a few ms per class.
	JavaLog now integrated.
	
	Configgy has a format-string log method.


10/16:
	Tried with boolean[].  No difference.

    int newLen = Math.max(id+1, cachedMaskTable.length);
    boolean[] newTable = Arrays.copyOf(cachedMaskTable, newLen);
    newTable[id] =  newVal;


10/17:
	Doing rewrite with ASM could be miserable. Consider the case like this:
push message
if(foo)
   call logg	
else
   call printf.

Pushing the ID onto the stack before message will leave the stack unbalanced.

FIX:  push the ID arg last.


10/18:
	ASM-based version now works. 
	

10/20:
	Outlining ASM method-escape analysis. Want to use this for programmatic API.

	First pass: map from every bytecode that's a call to getMethID to ID of next successive log call.
	Define lattice where elements are sets of ints.
		Calls to getNextCallID() return the unique callID of the returned value.
		Propagation rule is just dataflow; merge operation is just union.
	If ever there's a store instruction to a static field, should delete store instr from code, replace with pop.
	Add corresponding store instr to static initializer.
	Replace calls to getNextCallID with const-push


10/21:
	Const rewriting works. Shaved off about 150 ns.
	Problem with java.util.logging 
Avg of log4j and commons
Unmodified	550
Fuse		758
Nofuse		915
	So fusing almost cut penalty in half.

Time for   https://github.com/twitter/configgy/tree/master/src/main/scala/net/lag to get code into michael's hands
	can specify JAVA_OPTS env var for scala

Can inline getNextCallID BEFORE rewriting statements. 


10/26:
	Why don't code hashes change when I expect them to?